ExportSpeeds <- st_write(TransformSpeeds,driver = "GeoJSON", "D:/R Exports/BusWorkTest/20220802_LDSLM_Data_File.json")
ExportSpeeds <- st_write(TransformSpeeds,driver = "GeoJSON", "D:/R Exports/BusWorkTest/20220729_LDSLM_Data_File.json")
View(ExportSpeeds)
RemoveNAs <- RemoveZeros %% drop_na(RemoveZeros)
RemoveNAs %% drop_na(RemoveZeros)
RemoveNAs <- na.omit(RemoveZeros)
View(RemoveNAs)
SpeedShape <- "D:/R Exports/BusWorkTest/Test Outputs/TestRun/Bus_Test_v3.shp"
ReadSpeed <- st_read(SpeedShape)
library(rgdal)
library(ggplot2)
library(shiney)
library(sf)
library(dplyr)
library(readxl)
library(ggpubr)
library(sp)
library(tidyverse)
SpeedShape <- "D:/R Exports/BusWorkTest/Test Outputs/TestRun/Bus_Test_v3.shp"
ReadSpeed <- st_read(SpeedShape)
ReadSpeed$ISA_Speed_ <- as.character(ReadSpeed$ISA_Speed_)
ReadSpeed$LIMIT <- dplyr::coalesce(ReadSpeed$ISA_Speed_,ReadSpeed$LIMIT)
ReadSpeedDelete <- ReadSpeed[,-c(1)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(3:4)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(4:8)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(5:12)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(6:23)]
ColumnNames <- c("Legend","TOID","DescriptiveTerm","NatureOfRoad","Speed_Limit")
colnames(ReadSpeedDelete)[1:5] <- ColumnNames
RemoveZeros <- subset(ReadSpeedDelete, Speed_Limit!="0")
RemoveNAs <- na.omit(RemoveZeros)
RemoveErrors <- RemoveNAs[!grepl("400",RemoveNAs$Legend),]
View(RemoveNAs)
View(RemoveZeros)
View(RemoveErrors)
TransformSpeeds <- st_transform(RemoveErrors,4326)
ExportSpeeds <- st_write(TransformSpeeds,driver = "GeoJSON", "D:/R Exports/BusWorkTest/20220818_LDSLM_Data_File.json")
SpeedShape <- "D:/R Exports/BusWorkTest/Test Outputs/ISA_300822/Backup11/Bus_Test_v3.shp"
ReadSpeed <- st_read(SpeedShape)
library(rgdal)
library(ggplot2)
library(shiney)
library(sf)
library(dplyr)
library(readxl)
library(ggpubr)
library(sp)
library(tidyverse)
SpeedShape <- "D:/R Exports/BusWorkTest/Test Outputs/ISA_300822/Backup11/Bus_Test_v3.shp"
ReadSpeed <- st_read(SpeedShape)
ReadSpeed$ISA_Speed_ <- as.character(ReadSpeed$ISA_Speed_)
ReadSpeed$LIMIT <- dplyr::coalesce(ReadSpeed$ISA_Speed_,ReadSpeed$LIMIT)
ReadSpeedDelete <- ReadSpeed[,-c(1)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(3:4)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(4:8)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(5:12)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(6:23)]
ColumnNames <- c("Legend","TOID","DescriptiveTerm","NatureOfRoad","Speed_Limit")
colnames(ReadSpeedDelete)[1:5] <- ColumnNames
RemoveZeros <- subset(ReadSpeedDelete, Speed_Limit!="0")
RemoveNAs <- na.omit(RemoveZeros)
RemoveErrors <- RemoveNAs[!grepl("400",RemoveNAs$Legend),]
TransformSpeeds <- st_transform(RemoveErrors,4326)
View(TransformSpeeds)
ExportSpeeds <- st_write(TransformSpeeds,driver = "GeoJSON", "D:/R Exports/BusWorkTest/20220906_LDSLM_Data_File.json")
SpeedShape <- "D:/R Exports/BusWorkTest/Test Outputs/ISA_300822/Backup11/Bus_Test_v3.shp"
ReadSpeed <- st_read(SpeedShape)
ReadSpeed$ISA_Speed_ <- as.character(ReadSpeed$ISA_Speed_)
ReadSpeed$LIMIT <- dplyr::coalesce(ReadSpeed$ISA_Speed_,ReadSpeed$LIMIT)
ReadSpeedDelete <- ReadSpeed[,-c(1)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(3:4)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(4:8)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(5:12)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(6:23)]
ColumnNames <- c("Legend","TOID","DescriptiveTerm","NatureOfRoad","Speed_Limit")
colnames(ReadSpeedDelete)[1:5] <- ColumnNames
RemoveZeros <- subset(ReadSpeedDelete, Speed_Limit!="0")
RemoveNAs <- na.omit(RemoveZeros)
RemoveErrors <- RemoveNAs[!grepl("400",RemoveNAs$Legend),]
TransformSpeeds <- st_transform(RemoveErrors,4326)
ExportSpeeds <- st_write(TransformSpeeds,driver = "GeoJSON", "D:/R Exports/BusWorkTest/20220906_LDSLM_Data_File.json")
View(TransformSpeeds)
library(rgdal)
library(ggplot2)
library(shiney)
library(sf)
library(dplyr)
library(readxl)
library(ggpubr)
library(sp)
library(tidyverse)
CynemonDataRaw <- read.csv("D:/R Exports/Cynemon_Data/data_polygon_cynemon2.csv")
view(CynemonDataRaw)
CynemonID <- cbind(CynemonDataRaw,ZoneID)
CynemonID <- cbind(CynemonDataRaw,"ZoneID")
View(CynemonID)
CynemonIDExtract <- paste0("PG",CynemonDataRaw[1,])
CynemonIDExtract <- paste0("PG",CynemonDataRaw[,1])
CynemonID <- cbind(CynemonDataRaw,ZoneID)
ZoneID <- paste0("PG",CynemonDataRaw[,1])
CynemonID <- cbind(CynemonDataRaw,ZoneID)
View(CynemonID)
CynemonRemove <- CynemonID(,-c(1,3))
CynemonRemove <- CynemonID[,-c(1,3)]
View(CynemonRemove)
CynemonLength <- length(CynemonRemove)
CynemonLength <- tail(CynemonRemove)
View(CynemonID)
View(CynemonLength)
CynemonLast <- which(colnames(CynemonRemove)=="ZoneID")
CynemonLast2 <- CynemonLast - 1
CynemonReorder <- CynemonRemove[,c(CynemonLast,1:CynemonLast2)]
View(CynemonReorder)
CynemonDataRaw <- read.csv("D:/R Exports/Cynemon_Data/data_polygon_cynemon2.csv")
ZoneID <- paste0("PG",CynemonDataRaw[,1])
CynemonID <- cbind(CynemonDataRaw,ZoneID)
CynemonRemove <- CynemonID[,-c("polygon_id","area")]
CynemonRemove <- CynemonID[,!names(CynemonID) %in% c("polygon_id","area")]
CynemonLast <- which(colnames(CynemonRemove)=="ZoneID")
CynemonLast2 <- CynemonLast - 1
CynemonReorder <- CynemonRemove[,c(CynemonLast,1:CynemonLast2)]
View(CynemonReorder)
view(CynemonDataRaw)
CynemonRemove <- CynemonID[,!names(CynemonID) %in% c("i..polygon_id","area")]
CynemonLast <- which(colnames(CynemonRemove)=="ZoneID")
CynemonLast2 <- CynemonLast - 1
CynemonReorder <- CynemonRemove[,c(CynemonLast,1:CynemonLast2)]
View(CynemonReorder)
CynemonRemove <- CynemonID[,!names(CynemonID) %in% c("i...polygon_id","area")]
CynemonLast <- which(colnames(CynemonRemove)=="ZoneID")
CynemonLast2 <- CynemonLast - 1
CynemonReorder <- CynemonRemove[,c(CynemonLast,1:CynemonLast2)]
View(CynemonReorder)
colnames(CynemonDataRaw[1])
CynemonRemove <- CynemonID[,!names(CynemonID) %in% c("Ã¯..polygon_id","area")]
CynemonLast <- which(colnames(CynemonRemove)=="ZoneID")
CynemonLast2 <- CynemonLast - 1
CynemonReorder <- CynemonRemove[,c(CynemonLast,1:CynemonLast2)]
View(CynemonReorder)
View(CynemonReorder)
?cbind
CynemonPaste <- cbind(CynemonReorder,rep(CynemonReorder[1],3))
View(CynemonPaste)
CynemonPaste <- cbind(CynemonReorder[1],rep(CynemonReorder[1],3))
View(CynemonPaste)
?nrow
CynemonReorder <- CynemonRemove[,c(CynemonLast,1:CynemonLast2)]
CynemonPaste <- rbind(CynemonReorder,CynemonReorder[rep(c(3:nrow),ncol-2]))
CynemonPaste <- rbind(CynemonReorder,CynemonReorder[rep(c(3:nrow),ncol-2),]))
CynemonPaste <- rbind(CynemonReorder,CynemonReorder[rep(c(3:nrow),ncol-2),])
CynemonPaste <- rbind(CynemonReorder,CynemonReorder[rep(c(3:nrow(CynemonReorder)),ncol-2),])
CynemonPaste <- rbind(CynemonReorder,CynemonReorder[rep(c(3:nrow(CynemonReorder)),ncol(CynemonReorder-2),])
CynemonPaste <- rbind(CynemonReorder,CynemonReorder[rep(c(3:nrow(CynemonReorder)),ncol(CynemonReorder)-2),])
View(CynemonPaste)
View(CynemonReorder)
ncol(CynemonPaste)
nrow(CynemonReorder)
CynemonPaste <- rbind(CynemonReorder,CynemonReorder[rep(c(nrow(CynemonReorder)),ncol(CynemonReorder)-2),])
CynemonPaste <- rbind(CynemonReorder,CynemonReorder[rep(c(1:nrow(CynemonReorder)),ncol(CynemonReorder)-2),])
ncol(CynemonReorder)-2
?matches
?matches
shiny::runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
?addHistory
runApp('D:/R Exports/ShineyApp/SNA')
addResetMapButton()
?addResetMapButton
runApp('D:/R Exports/ShineyApp/SNA')
runApp()
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
library(rgdal)
library(ggplot2)
library(shiney)
library(sf)
library(dplyr)
library(readxl)
library(ggpubr)
library(sp)
library(tidyverse)
SpeedShape <- "D:/R Exports/BusWorkTest/Test Outputs/ISA_300822/Backup12/Bus_Test_v3.shp"
ReadSpeed <- st_read(SpeedShape)
ReadSpeed$ISA_Speed_ <- as.character(ReadSpeed$ISA_Speed_)
ReadSpeed$LIMIT <- dplyr::coalesce(ReadSpeed$ISA_Speed_,ReadSpeed$LIMIT)
ReadSpeedDelete <- ReadSpeed[,-c(1)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(3:4)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(4:8)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(5:12)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(6:23)]
ColumnNames <- c("Legend","TOID","DescriptiveTerm","NatureOfRoad","Speed_Limit")
colnames(ReadSpeedDelete)[1:5] <- ColumnNames
RemoveZeros <- subset(ReadSpeedDelete, Speed_Limit!="0")
RemoveNAs <- na.omit(RemoveZeros)
RemoveErrors <- RemoveNAs[!grepl("400",RemoveNAs$Legend),]
TransformSpeeds <- st_transform(RemoveErrors,4326)
ExportSpeeds <- st_write(TransformSpeeds,driver = "GeoJSON", "D:/R Exports/BusWorkTest/20221024_LDSLM_Data_FileTEST.json")
View(TransformSpeeds)
SpeedShape <- "D:/R Exports/BusWorkTest/Test Outputs/ISA_300822/Backup12/Bus_Test_v3.shp"
ReadSpeed <- st_read(SpeedShape)
ReadSpeed$ISA_Speed_ <- as.character(ReadSpeed$ISA_Speed_)
ReadSpeed$LIMIT <- dplyr::coalesce(ReadSpeed$ISA_Speed_,ReadSpeed$LIMIT)
ReadSpeedDelete <- ReadSpeed[,-c(1)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(3:4)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(4:8)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(5:12)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(6:23)]
ColumnNames <- c("Legend","TOID","DescriptiveTerm","NatureOfRoad","Speed_Limit")
colnames(ReadSpeedDelete)[1:5] <- ColumnNames
RemoveZeros <- subset(ReadSpeedDelete, Speed_Limit!="0")
RemoveNAs <- na.omit(RemoveZeros)
RemoveErrors <- RemoveNAs[!grepl("400",RemoveNAs$Legend),]
Rremove20Zone <- gsub(" Zone","",RemoveErrors)
TransformSpeeds <- st_transform(RemoveErrors,4326)
Remove20Zone <- gsub(" Zone","",RemoveErrors$Speed_Limit)
Remove20Zone <- RemoveErrors %>%
mutate(Speed_Limit = str_replace(Speed_Limit," Zone",""))
View(Remove20Zone)
SpeedShape <- "D:/R Exports/BusWorkTest/Test Outputs/ISA_300822/Backup12/Bus_Test_v3.shp"
ReadSpeed <- st_read(SpeedShape)
ReadSpeed$ISA_Speed_ <- as.character(ReadSpeed$ISA_Speed_)
ReadSpeed$LIMIT <- dplyr::coalesce(ReadSpeed$ISA_Speed_,ReadSpeed$LIMIT)
ReadSpeedDelete <- ReadSpeed[,-c(1)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(3:4)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(4:8)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(5:12)]
ReadSpeedDelete <- ReadSpeedDelete[,-c(6:23)]
ColumnNames <- c("Legend","TOID","DescriptiveTerm","NatureOfRoad","Speed_Limit")
colnames(ReadSpeedDelete)[1:5] <- ColumnNames
RemoveZeros <- subset(ReadSpeedDelete, Speed_Limit!="0")
RemoveNAs <- na.omit(RemoveZeros)
RemoveErrors <- RemoveNAs[!grepl("400",RemoveNAs$Legend),]
Remove20Zone <- RemoveErrors %>%
mutate(Speed_Limit = str_replace(Speed_Limit," Zone",""))
TransformSpeeds <- st_transform(Remove20Zone,4326)
ExportSpeeds <- st_write(TransformSpeeds,driver = "GeoJSON", "D:/R Exports/BusWorkTest/20221024_LDSLM_Data_File.json")
shiny::runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
shiny::runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
install.packages("leaflet-easyprint")
install.packages("https://github.com/rowanwins/leaflet-easyPrint")
install.packages("devtools")
install.packages("devtools")
shiny::runApp('D:/R Exports/ShineyApp/SNA')
install.packages("githubinsall")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(tidyverse)
library(vroom)
library(sf)
library(tigris)
library(leaflet)
library(htmlwidgets)
library(shiny)
library(googleway)
library(leaflet.extras)
library(leaflet.extras2)
library(mapboxapi)
library(fontawesome)
library(mapview)
install.packages("devtools")
install("devtools")
library(usethis)
install.packages("devtools")
install.packages("devtools")
install.packages("devtools",type = "win.binary")
install.packages("devtools", type = "win.binary")
library(devtools)
install.packages("usethis",type = "win.binary")
install.packages("usethis", type = "win.binary")
library(devtools)
library(usethis)
install.packages("devtools",type = "win.binary")
install.packages("devtools", type = "win.binary")
install.packages("devtools", type = "win.binary")
library(devtools)
install.packages("usethis")
install.packages("usethis")
install.packages("devtools",type = "win.binary")
install.packages("devtools", type = "win.binary")
library(usethis)
library(devtools)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(rlang)
library(devtools)
library(usethis)
install.packages("backports"); install.packages("devtools")
install.packages("devtools")
library(devtools)
library(usethis)
library(rlang)
library(devtools)
library(usethis)
install.packages("backports"); install.packages("devtools")
library(devtools)
install_github("rowanwins/leaflet-easyPrint")
shiny::runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
map_interactive <- reactive({
addMapPane("base",zIndex = 410) %>%
addMapPane("pollution",zIndex = 420) %>%
addMapPane("overlay",zIndex = 430) %>%
setView(lng = -0.10932017,
lat = 51.500493,
zoom = 11) %>%
setMaxBounds(lng1 = -0.64469747,
lat1 = 51.832822,
lng2 = 0.46418831,
lat2 = 51.244695) %>%
addResetMapButton() %>%
addHistory(options = historyOptions(position = "topleft")) %>%
if (input$baselayer == "standard"){
clearTiles() %>%
addMapboxTiles(style_url = "mapbox://styles/joemarangos/cl2g1ochw001s14muumlqzopk", access_token = "pk.eyJ1Ijoiam9lbWFyYW5nb3MiLCJhIjoiY2wyZXI1eWdyMDI4OTNpbzNjYXlhcGxhYSJ9.gEJgFPqnRhd_MRL309zwcw",group = "standard",options = pathOptions(pane = "base"))
}
else if (input$baselayer == "light"){
clearTiles() %>%
addMapboxTiles(style_url = "mapbox://styles/joemarangos/cl2g1wt17002m14piyxlvvdat", access_token = "pk.eyJ1Ijoiam9lbWFyYW5nb3MiLCJhIjoiY2wyZXI1eWdyMDI4OTNpbzNjYXlhcGxhYSJ9.gEJgFPqnRhd_MRL309zwcw",group = "light",options = pathOptions(pane = "base"))
}
else if (input$baselayer == "streets"){
clearTiles() %>%
addMapboxTiles(style_url = "mapbox://styles/joemarangos/cl2g1z2ai002b14ksruxzlpe9", access_token = "pk.eyJ1Ijoiam9lbWFyYW5nb3MiLCJhIjoiY2wyZXI1eWdyMDI4OTNpbzNjYXlhcGxhYSJ9.gEJgFPqnRhd_MRL309zwcw",group = "streets",options = pathOptions(pane = "base"))
}
else if (input$baselayer == "dark"){
clearTiles() %>%
addMapboxTiles(style_url = "mapbox://styles/joemarangos/cl2ex322t001814piusq8f1p0", access_token = "pk.eyJ1Ijoiam9lbWFyYW5nb3MiLCJhIjoiY2wyZXI1eWdyMDI4OTNpbzNjYXlhcGxhYSJ9.gEJgFPqnRhd_MRL309zwcw",group = "dark",options = pathOptions(pane = "base"))
}
else if (input$baselayer == "satellite"){
clearTiles() %>%
addMapboxTiles(style_url = "mapbox://styles/joemarangos/cl2g1ucmp00d817prb81qbg43", access_token = "pk.eyJ1Ijoiam9lbWFyYW5nb3MiLCJhIjoiY2wyZXI1eWdyMDI4OTNpbzNjYXlhcGxhYSJ9.gEJgFPqnRhd_MRL309zwcw",group = "satellite",options = pathOptions(pane = "base"))
} %>%
if (input$snalayer == "NO2 Mean"){
clearShapes() %>%
addPolygons(data = SNALayer, label = labels,
stroke=TRUE,
color = "white",
weight = .5,
smoothFactor = .5,
opacity = 1,
fillOpacity = 0.6,
fillColor = SNALayer$LegendColNO2,
group = "NO2 Mean",
options = pathOptions(pane = "pollution"),
highlightOptions = highlightOptions(weight = 2,
fillOpacity = 0.8,
color = "yellow",
opacity = 1,
bringToFront = TRUE))}
else if (input$snalayer == "NOx Mean"){
clearShapes() %>%
addPolygons(data = SNALayer, label = labels3,
stroke = TRUE,
color = "white",
weight = .5,
smoothFactor = .5,
opacity = 1,
fillOpacity = 0.6,
fillColor = SNALayer$LegendColNOX,
group = "NOx Mean",
options = pathOptions(pane = "pollution"),
highlightOptions = highlightOptions(weight = 2,
fillOpacity = 0.8,
color = "yellow",
opacity = 1,
bringToFront = TRUE))
}
else if (input$snalayer == "None"){
clearShapes()
}
})
map_interactive()
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp()
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp()
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp()
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
?easyprintMap
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
?easyprintMap
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
?leafletOutput
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
?easyprintOptions
?actionbutton
?actionButton
?downloadButton
runApp('D:/R Exports/ShineyApp/SNA')
?easyprintOptions
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp()
runApp('D:/R Exports/ShineyApp/SNA')
?onRender
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
shiny::runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
?h5
runApp('D:/R Exports/ShineyApp/SNA')
runApp()
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
?shiny::icon
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
?actionButton
runApp('D:/R Exports/ShineyApp/SNA')
?actionButton
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
install.packages("sinyjs")
install.packages("shinyjs")
library(shinyjs)
runApp('D:/R Exports/ShineyApp/SNA')
?toggle
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
?useShinyjs
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
?hide
runApp('D:/R Exports/ShineyApp/SNA')
?updateCheckboxInput
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
?addFullscreenControl
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
?scaleBarOptions
install.packages("prettymapr")
library(prettymapr)
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
north.arrow.icon <-
"<img src='http://ian.umces.edu/imagelibrary/albums/userpics/10002/normal_ian-symbol-north-arrow-2.png' style='width:40px;height:60px;'>"
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
?absolutePanel
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp('D:/R Exports/ShineyApp/SNA')
runApp()
runApp('D:/R Exports/ShineyApp/SNA')
shiny::runApp('D:/R Exports/ShineyApp/SNA')
